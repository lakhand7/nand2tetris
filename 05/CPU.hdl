// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
	Mux16(a=instruction,b=prosout,sel=instruction[15],out=temp);
	
	Not(in=instruction[15],out=addr1);
	Or(a=addr1,b=instruction[5],out=addr2);
	ARegister(in=temp,load=addr2,out=temp1,out[0..14]=addressM);
	
	
	Mux16(a=temp1,b=inM,sel=instruction[12],out=temp2);
	
	ALU(y=temp2,x=finalD,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=prosD,out=prosout,out[15]=counter,out[0..7]=tempout1,out[8..15]=tempout2,zr=zr,ng=ng);
	
	And(a=instruction[3],b=instruction[15],out=writeM);
	
	And(a=instruction[4],b=instruction[15],out=DRegis);
	DRegister(in=prosD,load=DRegis,out=finalD);
	
	Or8Way(in=tempout1,out=equality1);
	Or8Way(in=tempout2,out=equality2);
	Or(a=equality1,b=equality2,out=equality3);
    Not(in=equality3,out=equality); //Checking for equality

    Or(a=counter,b=false,out=less1); //Checking if outM is greater than or less than zero.
	And(a=less1,b=equality3,out=less); //Checking both if less than zero and also not equal to zero.
	Not(in=counter,out=greater1);
	And(a=greater1,b=equality3,out=greater); //checking both if greater than zero and also not equal to zero
	Or(a=equality,b=less,out=lessequal);
	Or(a=equality,b=greater,out=greatequal);
	
	
	Mux8Way(a=false,b=greater,c=equality,d=greatequal,e=less,f=equality3,g=lessequal,h=true,sel[0]=instruction[0],sel[1]=instruction[1],sel[2]=instruction[2],out=jump1);
	
	And(a=jump1,b=instruction[15],out=finalPc);
	PC(in=temp1,reset=reset,load=finalPc,inc=true,out[0..14]=pc);
	
	}